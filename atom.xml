<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JoyZgq.github.io</id>
    <title>bravo</title>
    <updated>2020-04-22T02:33:49.775Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JoyZgq.github.io"/>
    <link rel="self" href="https://JoyZgq.github.io/atom.xml"/>
    <subtitle>Tomorrow is another day.🎈🐱‍🏍</subtitle>
    <logo>https://JoyZgq.github.io/images/avatar.png</logo>
    <icon>https://JoyZgq.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, bravo</rights>
    <entry>
        <title type="html"><![CDATA[JDK Source---java.lang.Number]]></title>
        <id>https://JoyZgq.github.io/post/jdk-source-number/</id>
        <link href="https://JoyZgq.github.io/post/jdk-source-number/">
        </link>
        <updated>2019-01-17T14:15:19.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://JoyZgq.github.io/post-images/1587478575138.jpg" alt="" loading="lazy"></figure>
<h3 id="numberjava">Number.java</h3>
<h4 id="summary-综述">Summary 综述🤡👾😉</h4>
<blockquote>
<p>实现的所有接口:Serializable</p>
</blockquote>
<pre><code>package java.lang;

/**
 * The abstract class {@code Number} is the superclass of platform
 * classes representing numeric values that are convertible to the
 * primitive types {@code byte}, {@code double}, {@code float}, {@code
 * int}, {@code long}, and {@code short}.
 * 此抽象类是Java平台表示数值类型的类的父类，其可以转化为基本数值类型，如byte，double,float,int,long,short
 * &lt;p&gt;
 * The specific semantics of the conversion from the numeric value of
 * a particular {@code Number} implementation to a given primitive
 * type is defined by the {@code Number} implementation in question.
 * 从特定Number实现的数值到给定基元类型的转换的特定语义由所Number实现定义。
 * &lt;p&gt;
 * For platform classes, the conversion is often analogous to a
 * narrowing primitive conversion or a widening primitive conversion
 * as defining in &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;
 * for converting between primitive types.  Therefore, conversions may
 * lose information about the overall magnitude of a numeric value, may
 * lose precision, and may even return a result of a different sign
 * than the input.
 * 对于平台类，转换通常类似于缩小基元转换或扩展基元转换（如The Java™ Language Specification中所定义），
 * 用于在基元类型之间进行转换。 因此，转换可能会丢失有关数值总体大小的信息，可能会丢失精度，甚至可能返回与输入不同的符号结果。
 * &lt;p&gt;
 * See the documentation of a given {@code Number} implementation for
 * conversion details.
 * 有关转换详细信息，请参阅给定Number实现的文档。
 *
 * @author Lee Boynton
 * @author Arthur van Hoff
 * @jls 5.1.2 Widening Primitive Conversions
 * @jls 5.1.3 Narrowing Primitive Conversions
 * @since JDK1.0
 */
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://JoyZgq.github.io/post-images/1587478575138.jpg" alt="" loading="lazy"></figure>
<h3 id="numberjava">Number.java</h3>
<h4 id="summary-综述">Summary 综述🤡👾😉</h4>
<blockquote>
<p>实现的所有接口:Serializable</p>
</blockquote>
<pre><code>package java.lang;

/**
 * The abstract class {@code Number} is the superclass of platform
 * classes representing numeric values that are convertible to the
 * primitive types {@code byte}, {@code double}, {@code float}, {@code
 * int}, {@code long}, and {@code short}.
 * 此抽象类是Java平台表示数值类型的类的父类，其可以转化为基本数值类型，如byte，double,float,int,long,short
 * &lt;p&gt;
 * The specific semantics of the conversion from the numeric value of
 * a particular {@code Number} implementation to a given primitive
 * type is defined by the {@code Number} implementation in question.
 * 从特定Number实现的数值到给定基元类型的转换的特定语义由所Number实现定义。
 * &lt;p&gt;
 * For platform classes, the conversion is often analogous to a
 * narrowing primitive conversion or a widening primitive conversion
 * as defining in &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;
 * for converting between primitive types.  Therefore, conversions may
 * lose information about the overall magnitude of a numeric value, may
 * lose precision, and may even return a result of a different sign
 * than the input.
 * 对于平台类，转换通常类似于缩小基元转换或扩展基元转换（如The Java™ Language Specification中所定义），
 * 用于在基元类型之间进行转换。 因此，转换可能会丢失有关数值总体大小的信息，可能会丢失精度，甚至可能返回与输入不同的符号结果。
 * &lt;p&gt;
 * See the documentation of a given {@code Number} implementation for
 * conversion details.
 * 有关转换详细信息，请参阅给定Number实现的文档。
 *
 * @author Lee Boynton
 * @author Arthur van Hoff
 * @jls 5.1.2 Widening Primitive Conversions
 * @jls 5.1.3 Narrowing Primitive Conversions
 * @since JDK1.0
 */
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Traveller 🍄]]></title>
        <id>https://JoyZgq.github.io/post/hello-TRA/</id>
        <link href="https://JoyZgq.github.io/post/hello-TRA/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
    </entry>
</feed>